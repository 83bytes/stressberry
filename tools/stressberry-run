#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
import argparse
import psutil
import sys
import threading
import time

import stressberry


def test():
    print('Cooldown...')
    stressberry.cooldown()

    stressberry.stress_cpu(num_cpus=1, time=30)

    print('Cooldown...')
    stressberry.cooldown()
    return


def _main():
    # args = _parse_cmd_arguments()

    t = threading.Thread(target=test, args=())
    t.start()

    interval = 1.0

    times = []
    temps = []
    freq = []
    cpu_load = []
    while t.is_alive():
        times.append(time.time())
        temps.append(stressberry.measure_temp())
        freq.append(stressberry.measure_core_frequency())
        cpu_load.append(psutil.cpu_percent() / 100.0)
        t.join(interval)

    # normalize times
    time0 = times[0]
    times = [tm - time0 for tm in times]

    print(len(times))
    print(times)
    print()
    print(temps)
    print()
    print(freq)
    print()
    print(cpu_load)

    return


def _parse_cmd_arguments():
    parser = argparse.ArgumentParser(
        description='Run stress test for the Raspberry Pi.'
        )
    parser.add_argument(
        '-v', '--version',
        help='display version information',
        action='version',
        version='stressberry {}, Python {}'.format(
            stressberry.__version__, sys.version
            )
        )
    parser.add_argument(
        'outfile',
        nargs='?',
        type=argparse.FileType('w'),
        default=sys.stdout,
        help='output BibTeX file (default: stdout)'
        )
    return parser.parse_args()


if __name__ == '__main__':
    _main()
